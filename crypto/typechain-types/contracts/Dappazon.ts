/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Dappazon {
  export type BrandStruct = {
    id: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
  };

  export type BrandStructOutput = [BigNumber, string] & {
    id: BigNumber;
    name: string;
  };

  export type CategoryStruct = {
    id: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
  };

  export type CategoryStructOutput = [BigNumber, string] & {
    id: BigNumber;
    name: string;
  };

  export type ItemStruct = {
    id: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    brand: Dappazon.BrandStruct;
    category: Dappazon.CategoryStruct;
    image: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    cost: PromiseOrValue<BigNumberish>;
    rating: PromiseOrValue<BigNumberish>;
    stock: PromiseOrValue<BigNumberish>;
  };

  export type ItemStructOutput = [
    BigNumber,
    string,
    Dappazon.BrandStructOutput,
    Dappazon.CategoryStructOutput,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    id: BigNumber;
    name: string;
    brand: Dappazon.BrandStructOutput;
    category: Dappazon.CategoryStructOutput;
    image: string;
    description: string;
    cost: BigNumber;
    rating: BigNumber;
    stock: BigNumber;
  };

  export type NewItemStruct = {
    id: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    brandId: PromiseOrValue<BigNumberish>;
    categoryId: PromiseOrValue<BigNumberish>;
    image: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    cost: PromiseOrValue<BigNumberish>;
    rating: PromiseOrValue<BigNumberish>;
    stock: PromiseOrValue<BigNumberish>;
  };

  export type NewItemStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    id: BigNumber;
    name: string;
    brandId: BigNumber;
    categoryId: BigNumber;
    image: string;
    description: string;
    cost: BigNumber;
    rating: BigNumber;
    stock: BigNumber;
  };

  export type FilterStruct = {
    brandIdSelected: PromiseOrValue<BigNumberish>;
    categoryIdSelected: PromiseOrValue<BigNumberish>;
    sortSelected: PromiseOrValue<string>;
    pageNumber: PromiseOrValue<BigNumberish>;
    pageSize: PromiseOrValue<BigNumberish>;
    itemsCount: PromiseOrValue<BigNumberish>;
    search: PromiseOrValue<string>;
  };

  export type FilterStructOutput = [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    brandIdSelected: BigNumber;
    categoryIdSelected: BigNumber;
    sortSelected: string;
    pageNumber: BigNumber;
    pageSize: BigNumber;
    itemsCount: BigNumber;
    search: string;
  };
}

export interface DappazonInterface extends utils.Interface {
  functions: {
    "brandExist(uint256)": FunctionFragment;
    "brands(uint256)": FunctionFragment;
    "buy(uint256)": FunctionFragment;
    "categories(uint256)": FunctionFragment;
    "categoryExist(uint256)": FunctionFragment;
    "getItem(uint256)": FunctionFragment;
    "getLimitBrands(uint256)": FunctionFragment;
    "getLimitCategories(uint256)": FunctionFragment;
    "isListed(uint256)": FunctionFragment;
    "items(uint256)": FunctionFragment;
    "itemsCounter()": FunctionFragment;
    "listItems((uint256,string,uint256,uint256,string,string,uint256,uint256,uint256)[])": FunctionFragment;
    "orderCount(address)": FunctionFragment;
    "orders(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "queryItems((uint256,uint256,string,uint256,uint256,uint256,string))": FunctionFragment;
    "quickSort((uint256,string,(uint256,string),(uint256,string),string,string,uint256,uint256,uint256)[],int256,int256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sameBytes(string,string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlistItems(uint256[])": FunctionFragment;
    "updateBrands((uint256,string)[])": FunctionFragment;
    "updateCategories((uint256,string)[])": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "brandExist"
      | "brands"
      | "buy"
      | "categories"
      | "categoryExist"
      | "getItem"
      | "getLimitBrands"
      | "getLimitCategories"
      | "isListed"
      | "items"
      | "itemsCounter"
      | "listItems"
      | "orderCount"
      | "orders"
      | "owner"
      | "queryItems"
      | "quickSort"
      | "renounceOwnership"
      | "sameBytes"
      | "transferOwnership"
      | "unlistItems"
      | "updateBrands"
      | "updateCategories"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "brandExist",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "brands",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "categories",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "categoryExist",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getItem",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLimitBrands",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLimitCategories",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isListed",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "items",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "itemsCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listItems",
    values: [Dappazon.NewItemStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "orderCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "queryItems",
    values: [Dappazon.FilterStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "quickSort",
    values: [
      Dappazon.ItemStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sameBytes",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unlistItems",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBrands",
    values: [Dappazon.BrandStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCategories",
    values: [Dappazon.CategoryStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "brandExist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "brands", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "categories", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "categoryExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLimitBrands",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLimitCategories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isListed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "items", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "itemsCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listItems", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orderCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queryItems", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quickSort", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sameBytes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlistItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBrands",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCategories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Buy(address,uint256,uint256)": EventFragment;
    "ListItem(string,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListItem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface BuyEventObject {
  buyer: string;
  orderId: BigNumber;
  itemId: BigNumber;
}
export type BuyEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BuyEventObject
>;

export type BuyEventFilter = TypedEventFilter<BuyEvent>;

export interface ListItemEventObject {
  name: string;
  cost: BigNumber;
  quantity: BigNumber;
}
export type ListItemEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ListItemEventObject
>;

export type ListItemEventFilter = TypedEventFilter<ListItemEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Dappazon extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DappazonInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    brandExist(
      brandId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    brands(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { id: BigNumber; name: string }>;

    buy(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    categories(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { id: BigNumber; name: string }>;

    categoryExist(
      categoryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getItem(
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Dappazon.ItemStructOutput]>;

    getLimitBrands(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Dappazon.BrandStructOutput[]]>;

    getLimitCategories(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Dappazon.CategoryStructOutput[]]>;

    isListed(
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    items(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        Dappazon.BrandStructOutput,
        Dappazon.CategoryStructOutput,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        name: string;
        brand: Dappazon.BrandStructOutput;
        category: Dappazon.CategoryStructOutput;
        image: string;
        description: string;
        cost: BigNumber;
        rating: BigNumber;
        stock: BigNumber;
      }
    >;

    itemsCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    listItems(
      _items: Dappazon.NewItemStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    orderCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    orders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, Dappazon.ItemStructOutput] & {
        time: BigNumber;
        item: Dappazon.ItemStructOutput;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    queryItems(
      filter: Dappazon.FilterStruct,
      overrides?: CallOverrides
    ): Promise<[Dappazon.ItemStructOutput[], Dappazon.FilterStructOutput]>;

    quickSort(
      arr: Dappazon.ItemStruct[],
      left: PromiseOrValue<BigNumberish>,
      right: PromiseOrValue<BigNumberish>,
      sortOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sameBytes(
      name1: PromiseOrValue<string>,
      name2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlistItems(
      _itemIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateBrands(
      _brands: Dappazon.BrandStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateCategories(
      _category: Dappazon.CategoryStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  brandExist(
    brandId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  brands(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { id: BigNumber; name: string }>;

  buy(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  categories(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { id: BigNumber; name: string }>;

  categoryExist(
    categoryId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getItem(
    itemId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Dappazon.ItemStructOutput>;

  getLimitBrands(
    limit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Dappazon.BrandStructOutput[]>;

  getLimitCategories(
    limit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Dappazon.CategoryStructOutput[]>;

  isListed(
    itemId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  items(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      Dappazon.BrandStructOutput,
      Dappazon.CategoryStructOutput,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      name: string;
      brand: Dappazon.BrandStructOutput;
      category: Dappazon.CategoryStructOutput;
      image: string;
      description: string;
      cost: BigNumber;
      rating: BigNumber;
      stock: BigNumber;
    }
  >;

  itemsCounter(overrides?: CallOverrides): Promise<BigNumber>;

  listItems(
    _items: Dappazon.NewItemStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  orderCount(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  orders(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, Dappazon.ItemStructOutput] & {
      time: BigNumber;
      item: Dappazon.ItemStructOutput;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  queryItems(
    filter: Dappazon.FilterStruct,
    overrides?: CallOverrides
  ): Promise<[Dappazon.ItemStructOutput[], Dappazon.FilterStructOutput]>;

  quickSort(
    arr: Dappazon.ItemStruct[],
    left: PromiseOrValue<BigNumberish>,
    right: PromiseOrValue<BigNumberish>,
    sortOption: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sameBytes(
    name1: PromiseOrValue<string>,
    name2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlistItems(
    _itemIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateBrands(
    _brands: Dappazon.BrandStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateCategories(
    _category: Dappazon.CategoryStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    brandExist(
      brandId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    brands(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { id: BigNumber; name: string }>;

    buy(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    categories(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { id: BigNumber; name: string }>;

    categoryExist(
      categoryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getItem(
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Dappazon.ItemStructOutput>;

    getLimitBrands(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Dappazon.BrandStructOutput[]>;

    getLimitCategories(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Dappazon.CategoryStructOutput[]>;

    isListed(
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    items(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        Dappazon.BrandStructOutput,
        Dappazon.CategoryStructOutput,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        name: string;
        brand: Dappazon.BrandStructOutput;
        category: Dappazon.CategoryStructOutput;
        image: string;
        description: string;
        cost: BigNumber;
        rating: BigNumber;
        stock: BigNumber;
      }
    >;

    itemsCounter(overrides?: CallOverrides): Promise<BigNumber>;

    listItems(
      _items: Dappazon.NewItemStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    orderCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, Dappazon.ItemStructOutput] & {
        time: BigNumber;
        item: Dappazon.ItemStructOutput;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    queryItems(
      filter: Dappazon.FilterStruct,
      overrides?: CallOverrides
    ): Promise<[Dappazon.ItemStructOutput[], Dappazon.FilterStructOutput]>;

    quickSort(
      arr: Dappazon.ItemStruct[],
      left: PromiseOrValue<BigNumberish>,
      right: PromiseOrValue<BigNumberish>,
      sortOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sameBytes(
      name1: PromiseOrValue<string>,
      name2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unlistItems(
      _itemIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateBrands(
      _brands: Dappazon.BrandStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateCategories(
      _category: Dappazon.CategoryStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Buy(address,uint256,uint256)"(
      buyer?: null,
      orderId?: null,
      itemId?: null
    ): BuyEventFilter;
    Buy(buyer?: null, orderId?: null, itemId?: null): BuyEventFilter;

    "ListItem(string,uint256,uint256)"(
      name?: null,
      cost?: null,
      quantity?: null
    ): ListItemEventFilter;
    ListItem(name?: null, cost?: null, quantity?: null): ListItemEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    brandExist(
      brandId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    brands(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buy(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    categories(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    categoryExist(
      categoryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getItem(
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLimitBrands(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLimitCategories(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isListed(
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    items(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    itemsCounter(overrides?: CallOverrides): Promise<BigNumber>;

    listItems(
      _items: Dappazon.NewItemStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    orderCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    queryItems(
      filter: Dappazon.FilterStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quickSort(
      arr: Dappazon.ItemStruct[],
      left: PromiseOrValue<BigNumberish>,
      right: PromiseOrValue<BigNumberish>,
      sortOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sameBytes(
      name1: PromiseOrValue<string>,
      name2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlistItems(
      _itemIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateBrands(
      _brands: Dappazon.BrandStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateCategories(
      _category: Dappazon.CategoryStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    brandExist(
      brandId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    brands(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buy(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    categories(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    categoryExist(
      categoryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getItem(
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLimitBrands(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLimitCategories(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isListed(
      itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    items(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    itemsCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listItems(
      _items: Dappazon.NewItemStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    orderCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryItems(
      filter: Dappazon.FilterStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quickSort(
      arr: Dappazon.ItemStruct[],
      left: PromiseOrValue<BigNumberish>,
      right: PromiseOrValue<BigNumberish>,
      sortOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sameBytes(
      name1: PromiseOrValue<string>,
      name2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlistItems(
      _itemIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateBrands(
      _brands: Dappazon.BrandStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateCategories(
      _category: Dappazon.CategoryStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
